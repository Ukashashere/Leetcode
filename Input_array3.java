//Taking input of an array from user using BufferedReader and InputStreamReader
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Input_array3
{
    public static void main(String[] args) throws IOException 
    {
        // Initializing the object InputStreamReade 
         
        InputStreamReader in = new InputStreamReader(System.in);
        
        // Initializing the object of BufferedReader 
        BufferedReader br = new BufferedReader(in);

        // Take the array size from the user
        System.out.println("Enter the size of the array: ");
        int s = 0;
        try {                                             /*The try { } catch ; return; construct is used in exception handling to define a block of code that may throw an exception, handle it, and then return a value. */
            s = Integer.parseInt(br.readLine());
        } catch (NumberFormatException e) {
            System.out.println("Invalid input for array size. Please enter a valid integer.");
            return;
        }

        // Initialize the array's
        // size using user input
        int[] arr = new int[s];

        // Take user elements for the array
        System.out.println("Enter the elements of the array: ");
        for (int i = 0; i < s; i++) {
            try {
                arr[i] = Integer.parseInt(br.readLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input for array element. Please enter a valid integer.");
                return;
            }
        }

        System.out.println("The elements of the array are: ");
        for (int i = 0; i < s; i++) {
          
            System.out.print(arr[i] + " ");
        }

        // Close the BufferedReader
        br.close();
    }
}

/*
The try { } catch ; return; construct is used in exception handling to define a block of 
code that may throw an exception, handle it, and then return a value. Here's a breakdown 
of how this works:

The try block contains the code that might throw an exception. If an exception occurs 
within the try block, the execution is transferred to the catch block.
The catch block is used to handle the exception. It can be followed by a return statement 
to return a value from the method or function. For example, if an exception is caught, the 
catch block can return a specific value to indicate that an error occurred.
The return statement is used to exit the method or function and return a value to the 
caller. If the try block does not throw an exception, the catch block is skipped, and the 
return statement in the try block is executed.
In some programming languages, such as Java, the finally block can also be used to execute 
code regardless of whether an exception is thrown or caught. However, the finally block is 
not part of the try { } catch ; return; construct.

It is important to note that the return statement in the catch block will override any 
return statement in the try block. This means that if both the try and catch blocks have a 
return statement, the value returned will be from the catch block.
*/

/*
An exception in Java is an event that disrupts the normal functioning of a program during 
execution.
It can occur at compile time or runtime and is typically used to signal an erroneous 
situation or conditions that the program shouldn't encounter. Exceptions are objects 
that represent these error conditions and can be generated by the Java runtime system 
or by the application code itself.
The primary objective of exception handling is to provide a means to detect and report an 
error so that the program can either handle it and continue or terminate gracefully.
*/